import * as THREE from 'three';
import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';
import {OrbitControls} from 'three/examples/jsm/controls/OrbitControls';
import {OBJLoader} from 'three/addons/loaders/OBJLoader.js';
import {MTLLoader} from 'three/addons/loaders/MTLLoader.js';

//I followed the guide
//I also watched the following tutorial to get started on three js but kind of built my own thing
//https://www.youtube.com/watch?v=Q7AOvWpIVHU

//Setup ThreeJS
const scene = new THREE.Scene();
const camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );
const renderer = new THREE.WebGLRenderer({
  canvas: document.querySelector('#bg'), //from fireship video
});

//Setting up the camera positions
renderer.setPixelRatio(window.devicePixelRatio);
renderer.setSize( window.innerWidth, window.innerHeight );
camera.position.z = 30; //distance from object

//torus shape - this was from the fireship tutorial i watched
/*
const geometry = new THREE.TorusGeometry( 10, 3, 16, 100 );
const material = new THREE.MeshStandardMaterial( { color: 0x00ff00} );
const torus = new THREE.Mesh( geometry, material );
scene.add( torus );
*/

//I learned pointlight from fireship vid
const pointLight = new THREE.PointLight(0xffffff,100,500);
pointLight.position.set(10,7,10)
pointLight.scale.set(5,5,5);
scene.add(pointLight);

const ambientLight = new THREE.AmbientLight(0xffffff);
scene.add(ambientLight);

const lightHelper = new THREE.PointLightHelper(pointLight);


const gridHelper = new THREE.GridHelper(200,50);
scene.add(lightHelper, gridHelper);

const controls = new OrbitControls(camera, renderer.domElement);

function animate() {
  requestAnimationFrame( animate);
  controls.update();
  renderer.render( scene, camera );
  
}

//my makewall is based on my previous assignments
function makeShack(){
  const wallTex = new THREE.TextureLoader().load('/src/images/Brick_10-512x512.png');
  const topWallTex = new THREE.TextureLoader().load('/src/images/Stone_08-512x512.png');
  const tileTex = new THREE.TextureLoader().load('/src/images/Tile_04-512x512.png');
  const capySign = new THREE.TextureLoader().load('/src/images/capysign.png');
  var g_map = [
  [1, 1, 1, 1, 1, 1, 1, 1],
  [1, 0, 0, 0, 0, 0, 0, 1],
  [1, 0, 0, 0, 0, 0, 0, 1],
  [2, 0, 0, 0, 0, 0, 0, 1],
  [2, 0, 0, 0, 0, 0, 0, 1],
  [1, 0, 0, 0, 0, 0, 0, 1],
  [1, 0, 0, 0, 0, 0, 0, 1],
  [1, 1, 1, 0, 0, 1, 1, 1],
  ];
  for(let x=0;x<8;x++){
    for(let y=0;y<8;y++){
      if(g_map[x][y]==1){ 
        const wall = new THREE.Mesh(
        new THREE.BoxGeometry(3,3,3),
        new THREE.MeshStandardMaterial({ map: wallTex}) //learned about meshstandard from fireship vid
        );
        wall.position.set(x*3,1.5,y*3);
        scene.add(wall);

        const tWall = new THREE.Mesh(
        new THREE.BoxGeometry(3,3,3),
        new THREE.MeshStandardMaterial({ map: topWallTex})
        );
        tWall.scale.set( 1, 2, 1 );
        tWall.position.set(x*3,6,y*3);
        scene.add(tWall);
      }
      if(g_map[x][y]==2){ 
        const wall = new THREE.Mesh(
        new THREE.BoxGeometry(3,3,3),
        new THREE.MeshStandardMaterial({ map: wallTex}) //learned about meshstandard from fireship vid
        );
        wall.position.set(x*3,1.5,y*3);
        scene.add(wall);
      }
    }
  }  
  //roof loop
  for(let x=0;x<8;x++){
    for(let y=0;y<8;y++){
      const roof = new THREE.Mesh(
        new THREE.BoxGeometry(3,3,3),
        new THREE.MeshStandardMaterial({ map: wallTex}) //learned about meshstandard from fireship vid
        );
        roof.scale.set( 1, .5, 1 );
        roof.position.set(x*3,9.75,y*3);
        scene.add(roof);
      }
    } 

  tileTex.repeat.set(2,2); //found on threejs site
  tileTex.wrapS = THREE.RepeatWrapping; // generated by claudeai, helps with texture wrapping
  tileTex.wrapT = THREE.RepeatWrapping; // generated by claudeai, helps with texture wrapping
  const floor = new THREE.Mesh(
    new THREE.BoxGeometry(3,3,3),
    new THREE.MeshStandardMaterial({ map: tileTex}) //learned about meshstandard from fireship vid
    );
  floor.scale.set( 7, .1, 7 );
  floor.position.set(11.9,0.1,10.5);
  scene.add(floor);

  const sign = new THREE.Mesh(
    new THREE.BoxGeometry(3,3,3),
    new THREE.MeshStandardMaterial({ map: capySign}) //learned about meshstandard from fireship vid
    );
  sign.rotation.x += Math.PI * 1.5  // rotating 90 degree, didnt realize I could rotate it using Math.PI
  sign.rotation.z += Math.PI * .5 // rotating sign up
  sign.scale.set( 2, .1, 1.1 );
  sign.position.set(22.4,5.2,3);
  scene.add(sign);


}



//loading in my capybara obj 

{
  const objLoader = new OBJLoader();
  objLoader.load('src/obj/capyTopHat.obj', (capybara1) => {
    scene.add(capybara1);
    capybara1.position.set(8,0.1,7);
    capybara1.rotation.y += Math.PI * .22;
    capybara1.scale.set(5,5,5);
  });
}

{
  const mtlLoader = new MTLLoader();
  mtlLoader.load('src/obj/capyTopHat.mtl', (mtl) => {
    mtl.preload();
    objLoader.setMaterials(mtl);
    objLoader.load('src/obj/capyTopHat.obj', (root) => {
    scene.add(root);
    root.position.set(8,0.1,7);
    root.rotation.y += Math.PI * .22;
    root.scale.set(5,5,5);
    });
  });
}


const fTex = new THREE.TextureLoader().load('/src/images/Stone_04-512x512.png');
fTex.repeat.set(8,8); //found on threejs site
fTex.wrapS = THREE.RepeatWrapping; // generated by claudeai, helps with texture wrapping
fTex.wrapT = THREE.RepeatWrapping; // generated by claudeai, helps with texture wrapping
const floor = new THREE.Mesh(
  new THREE.BoxGeometry(3,3,3),
  new THREE.MeshStandardMaterial({ map: fTex}) //learned about meshstandard from fireship vid
  );
floor.scale.set( 72, .1, 72 );
scene.add(floor);

const skytexture = new THREE.TextureLoader().load('src/images/sky.jpg');
scene.background = skytexture;

makeShack();
animate();
renderer.setAnimationLoop( animate );